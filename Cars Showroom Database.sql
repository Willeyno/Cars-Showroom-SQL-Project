-- STEVE CAR SHOWROOM ANALYSIS PROJECT

-- TASK 1: Create a database for the company

CREATE DATABASE Car_Showroom_db;
USE Car_Showroom_db;

-- TASK 2: Create a table for cars


CREATE TABLE Cars (	car_id INT PRIMARY KEY IDENTITY(1,1) NOT NULL, 
					make VARCHAR (50) NOT NULL,
					type VARCHAR (50) NOT NULL,
					style VARCHAR (50) NOT NULL,
					cost_$ INT NOT NULL);

-- TASK 3: Create a table for Sales

CREATE TABLE Sales (sale_id INT PRIMARY KEY NOT NULL,
					car_id INT,salesman_id INT,
					purchase_date DATE,FOREIGN KEY (car_id) REFERENCES cars(car_id),
					FOREIGN KEY (salesman_id) REFERENCES salespersons(salesman_id));

-- TASK 4: Create a table for Salespersons

CREATE TABLE salespersons (salesman_id INT PRIMARY KEY,
							name VARCHAR(50),
							age INT,city VARCHAR(50));

-- Task 5: Insert records from the table above into their respective tables you have created


-- inserting into Cars table

SET IDENTITY_INSERT Cars ON
INSERT INTO Cars (car_id, make, type, style, cost_$)
VALUES  (1, 'Honda', 'Civic', 'Sedan', 30000),
		(2, 'Toyota', 'Corolla', 'Hatchback', 25000),
		(3, 'Ford', 'Explorer', 'SUV', 40000),
		(4, 'Chevrolet', 'Camaro', 'Coupe', 36000),
		(5, 'BMW', 'X5', 'SUV', 55000),
		(6, 'Audi', 'A4', 'Sedan', 48000),
		(7, 'Mercedes', 'C-Class', 'Coupe', 60000),
		(8, 'Nissan', 'Altima', 'Sedan', 26000);
SET IDENTITY_INSERT Cars OFF


-- inserting into salespersons table

INSERT INTO salespersons (salesman_id, name, age, city) 
				VALUES (1, 'John Smith', 28, 'New York'),
						(2, 'Emily Wong', 35, 'San Fran'),
						(3, 'Tom Lee', 42, 'Seattle'),
						(4, 'Lucy Chen', 31, 'LA');

-- inserting into Sales table

INSERT INTO sales (sale_id, car_id, salesman_id, purchase_date) 
VALUES (1, 1, 1, '2021-01-01'),
	   (2, 3, 3, '2021-02-03'),
	   (3, 2, 2, '2021-02-10'),
	   (4, 5, 4, '2021-03-01'),
	   (5, 8, 1, '2021-04-02'),
	   (6, 2, 1, '2021-05-05'),
	   (7, 4, 2, '2021-06-07'),
	   (8, 5, 3, '2021-07-09'),
	   (9, 2, 4, '2022-01-01'),
	   (10, 1, 3, '2022-02-03'),
	   (11, 8, 2, '2022-02-10'),
	   (12, 7, 2, '2022-03-01'),
	   (13, 5, 3, '2022-04-02'),
	   (14, 3, 1, '2022-05-05'),
	   (15, 5, 4, '2022-06-07'),
	   (16,1, 2, '2022-07-09'),
	   (17, 2, 3, '2023-01-01'),
	   (18, 6, 3, '2023-02-03'),
	   (19, 7, 1, '2023-02-10'),
	   (20, 4, 4, '2023-03-01');

	   -- Selecting all columns from all tables to check for correct Data entry

	   SELECT * FROM sales;

	   SELECT * FROM salespersons;

	   SELECT * FROM Cars;


/*OBJECTIVES

The primary objective is to identify key insights based on specific questions, analyse the
business and provide recommendations for improvement. Determine which cars generate
 highest and lowest revenue.*/


 /* Questions
1. What are the details of all cars purchased in the year 2022?
2. What is the total number of cars sold by each sales person?
3. What is the total revenue generated by each sales person?
4. What is the total revenue generated by each car type?
5. What are the details of the cars sold by Emily Wong in 2021?
6. What is the total revenue generated by hatchback car?
7. What is the total revenue generated by SUV cars? 
8. What is the name and city of the salesperson who sold the most number of cars in
2023?
9. What is the name and age of the salesperson who generated the highest revenue in
the year 2022?
10. Assuming the sales target 180,000, group sales persons based on whether they were
able to achieve their target or not.

INSIGHT
1. Which salesperson sold the highest number of cars?
2. Which salesperson generated the highest revenue and how much?
3. Which car type generated the highest revenue?
4. Which city recorded the highest number of cars sold in 2023
5. In 2022 what was the highest revenue generated and by which sales person?
 */


  -- joining all tables together to gain insight
SELECT * 
FROM Cars c
	INNER JOIN Sales s
	ON c.car_id = s.car_id
	INNER JOIN [dbo].[salespersons] sp
	ON s.salesman_id = sp.salesman_id;


 -- 1. What are the details of all cars purchased in the year 2022?

SELECT * 
	FROM Cars c
INNER JOIN Sales s
	ON c.car_id = s.car_id
WHERE DATEPART(yy, purchase_date) = 2022;


 -- 2. What is the total number of cars sold by each sales person?


SELECT 
	sp.name, 
	COUNT(s.sale_id) AS total_no_of_cars 
FROM salespersons sp
	INNER JOIN Sales s
	ON sp.salesman_id = s.salesman_id
GROUP BY sp.name;


-- 3. What is the total revenue generated by each sales person?

SELECT 
	sp.salesman_id, 
	sp.name, 
	SUM(c.cost_$) AS total_revenue 
FROM salespersons sp
	INNER JOIN Sales s
	ON sp.salesman_id = s.car_id
	INNER JOIN Cars c
	ON s.salesman_id = c.car_id
GROUP BY 
		sp.salesman_id, 
		sp.name;



 -- 4. What is the total revenue generated by each car type?

 SELECT 
	c.car_id, 
	c.type, SUM(c.cost_$) AS total_revenue 
 FROM 
	salespersons sp
	INNER JOIN Sales s
	ON sp.salesman_id = s.car_id
	 INNER JOIN Cars c
	ON s.salesman_id = c.car_id
 GROUP BY 
		c.car_id, 
		c.type;

 
 -- 5. What are the details of the cars sold by Emily Wong in 2021?

 SELECT sp.name, 
	s.purchase_date,
	c.make, 
	c.type, 
	c.style, 
	c.cost_$	
FROM 
	Cars c
	INNER JOIN 
	Sales s
	ON 
	c.car_id = s.car_id
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
WHERE 
	sp.name = 'Emily Wong' 
AND 
	DATEPART(yy, purchase_date) = 2021;


-- 6. What is the total revenue generated by hatchback car?

SELECT 
	car_id, 
	style, 
	SUM(Cars.cost_$) AS 'total revenue by Hatchback car' 
FROM 
	Cars
GROUP BY 
	car_id, 
	style
HAVING 
	style = 'Hatchback'; 



-- 7. What is the total revenue generated by SUV cars? 

SELECT 
	car_id, 
	style, 
	SUM(c.cost_$) AS 'total revenue by Hatchback car' 
FROM 
	Cars c
GROUP BY 
	car_id, 
	style
HAVING 
	style = 'SUV'; 


-- 8. What is the name and city of the salesperson who sold the most number of cars in 2023?


SELECT TOP 1
	sp.name, 
	sp.city, 
	COUNT(*) AS max_cars_sold
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY 
	sp.name, 
	sp.city,
	YEAR(s.purchase_date)
HAVING 
	YEAR(s.purchase_date) = 2023
ORDER BY 
	max_cars_sold DESC;


-- 9. What is the name and age of the salesperson who generated the highest revenue in the year 2022?

SELECT 
	TOP 1
	sp.name, 
	sp.age, 
	SUM(c.cost_$) AS highest_revenue
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY 
	sp.name, 
	sp.age, 
	YEAR(s.purchase_date)
HAVING 
	YEAR(s.purchase_date) = 2022
ORDER BY 
	highest_revenue DESC;

-- 10. Assuming the sales target 180,000, group sales persons based on whether they were able to achieve their target or not.


WITH CTE AS 
			(SELECT  
				DISTINCT(sp.name) AS name, 
				SUM(c.cost_$) AS total_cost
			FROM 
				salespersons sp
				INNER JOIN 
				Sales s
				ON 
				sp.salesman_id = s.car_id
				INNER JOIN 
				Cars c
				ON 
				s.salesman_id = c.car_id
			GROUP BY 
				name)
SELECT *, 
	CASE
		WHEN total_cost >= 180000 THEN 'target achieved'
		ELSE 'target not achieved'
	END AS sales_target
FROM CTE
ORDER BY 
	name;

/*
INSIGHT
1. Which salesperson sold the highest number of cars?
2. Which salesperson generated the highest revenue and how much?
3. Which car type generated the highest revenue?
4. Which city recorded the highest number of cars sold in 2023
5. In 2022 what was the highest revenue generated and by which sales person?
*/

-- 1. Which salesperson sold the highest number of cars?
SELECT 
	TOP 1
	sp.name, 
	sp.city, 
	COUNT(*) AS max_cars_sold
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY 
	sp.name, 
	sp.city
ORDER BY 
	max_cars_sold DESC;

-- 2. Which salesperson generated the highest revenue and how much?

SELECT 
	TOP 1
	sp.name,  
	SUM(c.cost_$) AS highest_revenue
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY 
	sp.name
ORDER BY 
	highest_revenue DESC;


-- 3. Which car type generated the highest revenue?

SELECT
    c.make,
    c.type,  
    SUM(c.cost_$) AS highest_revenue,
    DENSE_RANK() OVER (ORDER BY SUM(c.cost_$) DESC) AS revenue_rank
FROM 
    Sales s
	INNER JOIN 
    salespersons sp ON s.salesman_id = sp.salesman_id
	INNER JOIN 
    Cars c ON c.car_id = s.car_id
GROUP BY 
    c.make, c.type
ORDER BY 
    highest_revenue DESC;

-- 4. Which city recorded the highest number of cars sold in 2023

SELECT 
	TOP 1
	sp.city,
	YEAR(s.purchase_date) AS purchased_year,
	COUNT(*) AS max_cars_sold
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY  
	sp.city,
	YEAR(s.purchase_date)
HAVING YEAR(s.purchase_date) = 2023
ORDER BY 
	max_cars_sold DESC;

-- 5. In 2022 what was the highest revenue generated and by which sales person?

SELECT 
	TOP 1
	sp.name,
	YEAR(s.purchase_date) AS purchased_year,
	SUM(c.cost_$) AS highest_revenue
FROM Sales s
	INNER JOIN 
	salespersons sp
	ON 
	s.salesman_id = sp.salesman_id
	INNER JOIN 
	Cars c
	ON 
	c.car_id=s.car_id
GROUP BY 
	sp.name,
	YEAR(s.purchase_date)
HAVING YEAR(s.purchase_date) = 2022
ORDER BY 
	highest_revenue DESC;